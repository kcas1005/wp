시험
    서버프로그램 구축
    1. 응용 서버플그램 Gradle
    2. 형상관리(SVN), 버전관리 Git에 대해서 쓰기
    3. 서비스 공통모듈
    4. junit테스트 @AutoWired로
    5. 업무프로세스 맵과 새업무프로세스 세분화
    6.
    7. junjit테스트
    8. 프로그램 구현할 때 서비스는 레파지토리를 불러오는 상관관계를 구현해서
       다른 사람에게 설명할 수 있는가
    9. 테스트


    시험 문제 답
        개발자 관점에서 View 영역과 Controller영역 Business 영역으로 나눴습니다.
        사이트에 접속해서 회원가입을 한다면 Controller 영역에서 Business 영역으로 넘어가서
        Repository 테이블에서 데이터를 받아서 값을 저장해줍니다.
        Controller로 넘어와 로그인 페이지로 넘겨줍니다. View영역에서 로그엔 페이지를 출력시켜줍니다.

    어플리케이션
    1. React native Webapp 기능
        -웹(Web) : http프로토콜로 웹브라우저를 기동(크롬, 익스)
        -앱(app) : application, 스마트폰에서 프로그램을 다운받아 실행(실제 프로그램을 만들어서 기동)

        웹은 html(css)로 만들며, app은 자바, 코틀린(안드로이드), 스위프트(iOS) 특정 언어로 구현

        javascript에서는 html, css, 자바스크립트로 스마트폰에서 기동가능한 앱까지 만들면 시장을 장악할 수 있다!
        > react native > flutter ...

        React : 자바스크립트 프레임 워크(즉, 자바스크립트로 개발을 편하게 만드는 기구
        (ex)자바 > spring, python> Django) react외에 앵귤러, 뷰 등 다양한 프레임워크가 있으며,
        react가 60%이상 시장 점유율을 보이고 있음.

        앱은 네이티브언어(자바, 코틀린, 스위프트)로 퍼포먼스가 강함, 게임같은 성능 중심의 앱일 경우
        반드시 네이티브 언어로 구현 (flutter(dart언어) 프레임워크는 브릿지 통신이 아닌 네이티브 코드 로딩방식으로
        속도를 빠르게 만드는 하이브리드 앱)

        *웹의 장점:
            1.브라우저 통신으로 왠만한 권한은 브라우저 안에서 취득하고 실행(팝업, 외부프로그램, GPS...)
              그에 반에 앱은 실행할 때 사용자에게 권한을 요청받고 허락받아야지 기능 실행가능(카메라 권한 등)

            2. HTML, CSS Javascript언어로 웹을 구현하는 통일성, 그와 달리 앱은 안드로이드일 경우(자바, 코틀린), ios일 경우
               스위프트 등 다양한 언어를 배워야 가능

        *웹의 단점:
            OS 자원이나 특이기능을 사용하기 힘듬(카메라 기능 중에 줌인, 줌아웃기능을 100%쓰지 못함(광각...)
            css버전마다 구현가능한 디자인이 각기 다르기 때문에 출력되는..
            (항상, 사이트 하단에 보면 ex 크롬브라우저 91.01버전에 최적화되었습니다 라는 문구가 존재)

        *앱의 장점:
            스마트폰의 퍼포먼스를 100%발휘할 수 있도록 OS에서 시스템 권한을 얻고 기능을 수행(게임 개발에 특화)
            사용자 경험이 월등(부드럽게 앱 기동)

        *앱의 단점:
            설치, 버전 관리, 버그 있을 때 대처할 수 있는 방법은 재설치 혹은 수정버전 다운

    2. Expo.snak

    3. 서버와 브라우저 연결



    빅데이터
        PyTorch (연구용 자료기 때문에 무료)
        Tensorflow

    클라우드 개발
    구름IDE

    EXPO