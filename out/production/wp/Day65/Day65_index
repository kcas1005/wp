버전업 = 일 많음

Servicelmpl에 핵심 기술 집어넣기


시험

1. 그래이들 설명 잘할것
2. 클라우드서버에 배포 >
3. 데이터모델링
4. 컨트롤러 모델 뷰 mvc 패턴 레파지토리 db연결 타임리프 보는 흐름
5. 스프링부트 활용해서 장점 ( 빌드되면 웹스타터 라이브러리에 톰캣이 내장되어 즉시 웹서비스에 배포할 수 있기 때문에)
6.플로우차트 추가적인 내용을 제시하시오 쿼리를 사용해서 단조로운 입출력에서
    db개발자도 sql문을 통해서 이 프로젝트를 참여할 수 있도록 범위를 넓혔다.

220817

dependencies

jpa
thymeleaf
lombook

문제1-1-0.
    사용하는 라이브러리는 롬복, 타임리프가 있습니다.
    롬복은 JAVA 라이브러리로 반복되는 메소드를 Annotation을 사용해서 자동으로 작성해주는 라이브러리입니다.
    그래서 귀찮은 과정을 줄여주고 반복되는 코드를 대신 작성해주기 때문에 기술적인 코드에 집중 할 수 있습니다.

    타임리프는 흔히 View Template(뷰 템플릿)이라고 부릅니다. 컨트롤러가 전달하는 데이터를 이용해서 동적으로 화면을 구성할 수 있게 해줍니다.

문제1-2-3.
    Gradle에서 Build를 하면 Wrapper에 파일명으로 .jar확장자 파일을 오라클클라우드 인스턴스인 Remote Host에 업로드합니다.
    클라우드 OS(우분투)에 java 설치 > 우분투 방화벽 열기 > 클라우드에 방화벽 열기 > 클라우드에 있는 자바로 업로드한 파일 실행하기

문제2-1-2.
    Client가 게시글을 등록하면 Controller의 게시글등록 어노테이션 메소드를 실행합니다.
    Controller에서 Service의 게시글 값을 받기위해 Repository에 요청합니다.
    Repository는 CrudRepository를 상속받기 때문에 DB에 접속 권한을 허락받습니다.
    허락받은 값을 다시 Service로 보냅니다
    Serivce에서 값을 Controller로 보냅니다.
    Controller에서 모델에서 값을 맞추고 View로 보냅니다.
    View에서 Client에게 값이 보여집니다.

문제2-3-0.
    HTML에서 Member테이블을 찾고 Controller에 요청합니다.
    Controller에서 받은 email과 id 값을 Service에 보내줍니다.
    Service에서 MemberRepository에 DB에 요청한 쿼리 값을 가져옵니다.
    DB에서 받은 쿼리값을 Repository에서 Service로 넘겨줍니다.
    Service에서 Controller로 값을 넘겨주고 Controller는 HTML에 화면을 구현시킵니다.

문제3-1-2.
    Gradle 라이브러리를 지원해서 롬복, 타임리프등을 사용하면 불필요한 작업을 최소화 할 수 있습니다.
    또한 Gradle과 같은 빌드시스템을 기반으로 빌드를 할 수 있으며 Web Starter 라이브러리 안에 톰캣이
    내장되어 있어 웹배포를 보다 쉽게 할 수 있습니다. 덕분에 개발자는 Service 비즈니스 로직에 집중할 수 있습니다.

문제3-3-0.
    Service 관점으로 회원 정보를 사용한다면 개인정보가 유출 될 위험이 있으니
    첫번째 방법으로 예외처리문 등 해킹이나 이상시스템 감지한다면 모든 접속이 끊어지게 하거나
    두번쨰 방법으로는 DB에서 받을 때 암호화메서드를 만들어서 암호메서드로 암호생성과 해독 가능한 메서드를 만들면 된다고 생각합니다.

