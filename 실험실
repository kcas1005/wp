실험실 & 기록실

    스프링부트

        500에러 나오면 HTML @{/경로 설정 꼭 할 것} (화면, 값저장 둘다 안됨)
        404에러면 값은 저장되지만 화면 출력이 안됨
        공식 문서 오류 정리 : https://developer.mozilla.org/ko/docs/Web/HTTP/Status
        나무위키 오류 정리 : https://namu.wiki/w/HTTP/%EC%9D%91%EB%8B%B5%20%EC%BD%94%EB%93%9C

        회원정보 수정하기 오류 걸린이유(경로설정을 안해줘서)
            @RequestMapping(path = "/account")클래스 위에 이거 안넣어서 그럼

        댓글 만들기
            값 넣는 부분과 화면 출력 부분이 구분되어 있어야 했는데
            같은 곳에 넣음

            comment 필드값과 html 자바값 이름이 같아야 하는데 같지 않아서 헤맴

        게시판 글 일부분 20자 내로 보이게 하기
            size 입력했지만 안됨

        타임리프는 뭐하는 존재인가?
            자바에 값을 전달 받기 위함

        게시판
             게시판목록은 ArrayList로 index 번호로 구분을 하는데
             상세 게시판은 index 구분을 하지 않는데 어떻게 값을 알고 나오는가?
             필드값에 저장을 해둔다고 해도 index같은 구분이 없는데 어떻게 알고 출력되는가?

    자바
        함수 객체 메소드 생성자 명칭만 다르고 같은 기능을 하나?
            함수 = 메소드(실행) = 생성자
            객체 = 안에 클래스, 필드, 생성자 영역으로 나누어짐
            오버로딩 = 클래스와 메소드 명칭을 같게 해야함
            메소드 오버로딩 = 가능 하지만 현업에서 쓰이지 않음

        자바스크립트에서 함수가 중첩되서 매개변수 길이(개수) 안맞으면 undefied로 오류가 나는데 자바에는 왜 오류가 안나는가?
            자바스크립트는 함수를 덮어쓰기 때문에 매개변수와 인수 값을 정확하게 맞춰줘야하지만
            자바는 오버로딩으로 커버가 됨
            
        내부/외부 클래스 호출 =  내부/외부 오버로딩 호출 두개 혼동 중

        배열에서 null 값이 있을 시 Array를 사용 (Array 함수는 Null값이 들어감)

        부모,자식 상속, 인터페이스 상속 중첩 가능

        상위 상속이 없으면 형변환 안됨

        Enum과 String 배열 값은 서로 같음 대신 Enum을 쓸 땐 .equals()를 써야함
            그리고 배열은 길이를 .length 를하지만 Enum은 .Value를 씀

        배열에서 배열 안에 있는 값을 볼때는 Arrays.ToString(), 이중 배열 볼때는 Arrays.DeepToString()

        클래스끼리 값이 같은지 비교할 때는 instanceof를 씀

        Enum은 값을 추가 할 수 있을까?

        Enum을 출력하면 주소값이 보일까? 안에 값이 보일까?

        주소값이 보인다면 안에 값을 보려면 어떻게 해야 하나?

        static 으로 배열 만든 후 집어넣고 다시 실행하면 기존에 있던 값이 저장 되는가?



    
    자바스크립트
        배열에 공백을 넣고 계산하면 NaN이 나오는데 null을 넣는다면 어떻게 될까?
            자바스크립트만 배열에 모든 타입을 집어넣을 수 있음
    
    HTML / CSS
        CSS 스타일할때 포지션 같은거로 만들어두면 좋아보임

        span의 글은 텍스트 버티컬이 왜 안먹는가? display:table-cell, vertical-align 옵션 넣으면 됨
        플렉스는 블록이랑 호환 되는가? 호환됨

    git
        깃 명령어
            https://velog.io/@delilah/GitHub-Git-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C
            https://nack1400.tistory.com/16

        .git 파일 숨김 표시로 되어있음

        vscode에선 팀프로젝트랑 연동이 잘 되서 팀프로젝트로 push가 가능했는데, 인텔리 제이에선 팀프로젝트가 연동이 안됨
            포크로 가져와서 사용


    인텔리제이


    vscode

    정보
        https://huimang2.github.io/

    취업 면접
    Day69
        #java String이 불변객체이어야하는 이유와 string builder,string buffer는 어떤 연관이 있나요?

            String은 불변객체인 이유로써 장점은 다음과 같습니다.
            메모리 관리면으로는 상수풀에서 이미 완성된 문자열을 가져다 씁니다. 그러므로 재활용성 의미로 메모리 절약이 됩니다.
            불변객체이므로 바꿀 수 없는 데이터로써 안정적인 장점을 가지며,
            main메서드에 보면 프로그램 외부에서 Args를 받는데 메타정보로 문자열이기 때문에 바뀌지 않는
            String 문자열은 불변성으로 보안성에 이득이 있습니다.

            String builder와 String buffer는 모두 String 의 불변객체를 보안하기 위한 기능입니다.
            String의 문자단위로 저장하고 추가할 수 있도록 size()와 apped()기능으로 메모리 할당과 추가 문자를 받아서
            새로운 문자로 만들 수 있습니다.

            String builder와 String buffer는 동기화와의 차이 있습니다.
            String buffer는 싱크로나이즈 기능으로 멀티 쓰레드에서 자원을 공유하는 문제에 있어 안정적입니다.
            (쓰레드는 메모리를 공유합니다. 그러므로 다른 문자열을 중간에 수정하거나 문제를 야기할 수 있으므로,
            동기화 기능을 통해 멀티쓰레드에서 안정성을 확보합니다.)
            String builder는 싱크로나이즈 기능이 없으므로, 중간에 문자열을 바꾸는 것을 막기 위한 메서드 실행이 안되므로
            속도적인 부분에 이득이 있습니다.

        #컴파일 과정과 프로그램 실행 흐름에 대해서 설명하시오.

            -컴파일
            자바 클래스 파일이 자바컴파일러(javac)가 바이트코드로 변환해주는 작업을 일컫습니다. (.java > .class)

            -런타임(프로그램 실행)
            .clss파일을 클래스 로더에서 읽어오고,
            JVM은 Just In Time(JIT)컴파일러가 런타임 시스템으로 어떠한 OS환경에서나 구동가능하게 합니다. (자바의 장점 : OS에 상관없이 JVM만 있으면 자바 프로그램 실행가능)

    Day70
        #브라우저 동작원리에 대해 설명하시오

            1. User Interface
                UI(ex, button 등 태그)

            2. 브라우저 엔진
                데이터 스토리지 참조

            3. 렌더링 엔진
                 UI태그들을 HTML 문서에 파싱(문서화) >
                 DOM 구조 구축(HTML) >
                 CSSOM(CSS Object Model) css구조 구축 >
                 *DOM구조 구축되는 동안 실시간으로 DOM구조에서 렌더 트리(DOM + CSSOM)생성 >
                 레이아웃

            4. 통신, User Interface 백엔드 로직, 자바스크립트
                UI백엔드로 페이를 구축 > 클라이언트에게 페이지를 보여줍니다.
                *비동기 통신(Ajax..)이나 자바스크립트는 UI백엔드가 동작하면서 필요한 데이터를 받아오고 연산작업을 실행

        #MVC 패턴
            Model, View Controller로 기능이 분류되어 작업하는 패턴입니다.

            클라이언트에서 데이터 요청이 들어오면,
            Container에서 Servlet을 매핑하고 디스페처서블릿이
            Controller에 연결해주고, 매핑된 컨트롤러는 서비스로직을 찾아 전달합니다.(모든 전달 컨트롤은 디스페처서블릿)

            Repository를 통해서 JPA번역을 하고 DB작업 후 다시 Controller에 돌아가서
            디스패처서블릿은 ViewResolver로 HTML를 찾아가게 됩니다.
            이후 타임리프 템플릿엔진을 통해 데이터를 파싱하고 완성된 HTML를 클라이언트에게 전송하게 됩니다.
            이 작업은 Server Side Renderring 입니다.

        #만약 합격하시게 된다면 저희 회사에서 어떤 커리어를 만들어 나갈지에 대한 계획을 말씀해주세요.

            제가 만약 회사에 입사하게 된다면,
            우선 귀사에 회사원 1명으로써 일을 하고 싶다는 목표를 가지고 선임개발자를 보고 열심히 배울 것입니다.
            경험적인 부족함을 1년 내에 채우기 위한 필요한 기초지식을 항상 쌓으면 회사업무를 배우고 도움이 되도록 할 것입니다.
            네트워크의 패킷흐름이나 컴퓨터 명령어를 완벽히 배워서 구사할 수 있도록하여 행해지는 업무를 빠르게 처리할 수 있도록
            하고 싶습니다.
            3년 내에 정보보안기사 시험을 치루어 지식을 꼭 얻고 저의 커리어와 회사에 도움이 되도록 하고 싶습니다.
            5년 내에는 제가 바라는 데이터 정규화와 보안처리에 최적화된 블록체인 데이터 저장 웹서비스를 구축하여
            GITHUB를 통해 의견을 나누는 시니어 개발자가 이 회사에서 되고 싶습니다.

            거시적, 미시적

            1. 신입 개발자
            2. 성실성
            3. 미래지향석(현실적)
            4.

        #OSI 7계층이 무엇인지 설명하시오

            OSI 7계층이 생긴 이유 : 네트워크 통신이 일어나는 과정을 단계별로 구분해서 문제가 생기는 영역을 나누어 쉽게 관리하기 위해서.

            1. Physical 계층
                비트와 같은 전기통신으로 연결되어 있는 계층으로써 케이블이나 리피터장비에서 사용하는 계층
            2. Datalink 계층
                Mac주소(기계의 고유번호)로 point to point통신하는 계층, 브릿지와 스위치 장비에서 사용하는 계층
            3. Network 계층
                라우팅(목적지까지 안전하고 빠르게 전달), 프로토콜 다양.
                흐름제어, 오류제어, 라우팅, 경로설정, IP주소부여와 같은 작업 실행
            4. Transport 계층
                TCP/UDP
                TCP(Transmission Control Protocol) 신뢰성있는 데이터, 연결기반
                UDP(User Datagram Protocol)
            5. Session 계층
                데이터를 통신하기 위한 논리적인 연결로 프로그램 관점에서 볼때 세션 설정, 유지, 종료를 운영체제 영역에서 담당
            6. presentation 계층
                확장자, 인코딩, 데이터 암호화
            7. Application 계층
                응용 서비스 수행(Springboot 서비스 등등)
                HTML의 UI등 사용자 입출력, 소프트웨어 UI같은 사용자 정보를 수집하고 연산하는 영역
                (*HTTP명령)

        #인터페이스(자바)의 의미와 사용하는 이유는 무엇인가요?

            인터페이스는 상속과 달리 강제성이라는 장점과 구현되어 있지 않으므로
            @Override를 해야합니다.

            인터페이스를 통해서 클래스를 구현할 경우,
            @override로 구현하므로 의도치 않는 버그를 방지하고(필요한 메서드만 구현)
            새로운 메서드나 모듈을 추가할 때마다 클래스 전체를 수정하지 않는 장점.

            인터페이스를 도입하면 기능 구현을 통해 우연함과 견고함을 같이 지닐 수 있다는 장점.

            예를 들어 인터페이스를 만들어 협업 규칙을 만들어 놓고 각 개발자가 개발을 할 때 메서드 이름과 매개변수 조건등
            규칙에 맞춰 개발을 한다면 대규모 프로젝트에 안정성과 빠른 개발속도를 낼 수 있습니다.
            또한 필요 없거나 필요있는 기능(메서드를 쉽게 추가하고 제거할 수 있는 기준을 가질 수 있으므로 협업에 필요한 부분입니다.)

        #스택과 큐, 덱에 대해서 알고 있는대로 말해주세요.

            -스택(Last in First Out)
                입구가 하나인 원퉁
                stack.pop은 가장 최근에 삽입된 데이터가 스택에서 제거
                스택이 비었을 때 pop을 하면 stack underflow
                스택의 크기가 꽉찼는데, push를 하면 stack overflow
                last 데이터(top)의 위치를 바로 알수 있어요 = 시간복잡도 O(1)

            -queue(First in First Out)
                양쪽이 뚫린 원퉁(일방통행).선형큐, 원형큐
                중간의 데이터 접근이 안되요.(스택과 동일)

            -deque(Double ended Queue)
                양쪽에서 모두 Push와 pop가능.
                가변적 크기와 index검색가능(중간 값 알 수 있음)
                새로운 원소를 push를 할 때 메모리 재할당 복사가 아니라 새로운 메로리 블록 형성해서 삽입.
                (가변적 구성으로 메모리 할당후 지속적 데이터 삽입 가능)
                *chunk를 통해서 관리(흩어진 메모리 영역을 관리)

